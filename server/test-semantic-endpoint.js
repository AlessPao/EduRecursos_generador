import fetch from 'node-fetch';

async function testSemanticEndpoint() {
  try {
    console.log('üîç TESTING ENDPOINT SEM√ÅNTICO BATCH');
    console.log('==================================\n');

    // Probar el endpoint sin autenticaci√≥n (porque no requerimos auth en este endpoint)
    const userId = 1; // Paolo
    console.log(`üìä Llamando endpoint: /api/semantics/batch?usuarioId=${userId}`);
    
    const response = await fetch(`http://localhost:5000/api/semantics/batch?usuarioId=${userId}`);

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`Request failed: ${response.status} - ${errorText}`);
    }

    const data = await response.json();
    
    console.log('\nüìã RESPUESTA DEL ENDPOINT:');
    console.log('==========================');
    console.log(`‚úÖ Success: ${data.success}`);
    
    if (data.success && data.data) {
      const analysis = data.data;
      console.log('\nüìä RESUMEN:');
      console.log(`- Total recursos: ${analysis.summary.totalResources}`);
      console.log(`- Recursos analizados: ${analysis.summary.analyzedResources}`);
      console.log(`- Gram√°tica promedio: ${analysis.summary.averageGrammaticalCorrectness}%`);
      console.log(`- TTR promedio: ${analysis.summary.averageLexicalRichness}`);
      console.log(`- Calidad general: ${analysis.summary.overallQuality}`);
      
      console.log('\nüìà M√âTRICAS AGREGADAS:');
      console.log(`- Total textos: ${analysis.aggregatedMetrics.totalTexts}`);
      console.log(`- Total oraciones: ${analysis.aggregatedMetrics.totalSentences}`);
      console.log(`- Oraciones correctas: ${analysis.aggregatedMetrics.totalCorrectSentences}`);
      console.log(`- Tokens totales: ${analysis.aggregatedMetrics.totalTokens}`);
      console.log(`- Tipos √∫nicos: ${analysis.aggregatedMetrics.totalUniqueTypes}`);
    } else {
      console.log('‚ùå No se encontraron datos en la respuesta');
    }

  } catch (error) {
    console.error('‚ùå Error:', error.message);
  }
}

testSemanticEndpoint();
