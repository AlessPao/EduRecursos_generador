import axios from 'axios';
import { llm_base_url, offenrouter_api_key, llm_model } from '../config/index.js';

/**
 * Genera un recurso educativo utilizando LLM
 * @param {Object} params - Par√°metros para generar el recurso
 * @returns {Promise<Object>} - Recurso generado
 */
export async function generarRecurso(params) {
  const prompt = crearPrompt(params);

  const payload = {
    model: llm_model,
    messages: [
      {
        role: 'system',
        content:
          'Eres un docente experto en comunicaci√≥n para estudiantes de 2¬∫ grado que crea materiales did√°cticos alineados con el Curr√≠culo Nacional peruano.'
      },
      {
        role: 'user',
        content: prompt
      }
    ],
    temperature: 0.7,
    response_format: "json"
  };

  const headers = {
    'Authorization': `Bearer ${offenrouter_api_key}`,
    'Content-Type': 'application/json'
  };

  try {
    const response = await axios.post(`${llm_base_url}/chat/completions`, payload, { headers });

    // Validar la estructura de la respuesta
    if (!response.data || !response.data.choices || !response.data.choices.length) {
      throw new Error('Respuesta inv√°lida: estructura de datos inesperada.');
    }
    const content = response.data.choices[0].message.content;
    const recurso = parseJSON(content);
    return recurso;
  } catch (error) {
    console.error('Error al generar recurso con LLM:', error.response?.data || error.message);

    // Reintento
    try {
      console.log('Reintentando petici√≥n a LLM...');
      const retry = await axios.post(`${llm_base_url}/chat/completions`, payload, { headers });

      if (!retry.data || !retry.data.choices || !retry.data.choices.length) {
        throw new Error('Respuesta inv√°lida en reintento: estructura de datos inesperada.');
      }
      const retryContent = retry.data.choices[0].message.content;
      const recurso = parseJSON(retryContent);
      return recurso;
    } catch (retryError) {
      console.error('Error en segundo intento:', retryError.response?.data || retryError.message);
      throw new Error('No se pudo generar el recurso. Por favor, intente de nuevo m√°s tarde.');
    }
  }
}

/**
 * Crea el prompt adecuado seg√∫n el tipo de recurso
 * @param {Object} params - Par√°metros para el prompt
 * @returns {string} - Prompt generado
 */
function crearPrompt({ tipo, opciones }) {
  let prompt = '';

  // Agregar el t√≠tulo si se proporciona
  if (opciones.titulo) {
    prompt += `El t√≠tulo de este recurso es "${opciones.titulo}". Aseg√∫rate de que el contenido generado se relacione directamente con este t√≠tulo.\n\n`;
  }

  // Agregar competencias (usando las que se provean o un resumen por defecto)
  if (opciones.competencias) {
    prompt += `Utiliza las siguientes competencias como gu√≠a: ${opciones.competencias}\n\n`;
  } else {
    prompt += `Utiliza las siguientes competencias como gu√≠a:
- **Lectura**: Interpretar, inferir y evaluar textos simples (con ilustraciones y vocabulario conocido).
- **Escritura**: Organizar y desarrollar ideas de forma coherente, usando vocabulario adecuado, conectores b√°sicos y normas ortogr√°ficas.
- **Comunicaci√≥n Oral**: Expresar ideas de forma clara y estructurada, utilizando recursos verbales y no verbales y conectores simples.\n\n`;
  }

  // Generaci√≥n del prompt seg√∫n el tipo de recurso
  switch (tipo) {
    case 'evaluacion':
      prompt += `Genera un examen de opci√≥n m√∫ltiple de comprensi√≥n lectora para estudiantes de 2¬∫ grado con las siguientes caracter√≠sticas:
- T√≠tulo: ${opciones.titulo}
- Tipo de texto: ${opciones.tipoTexto}
- Tema: ${opciones.tema}
- Longitud: ${opciones.longitud} palabras
- Preguntas literales: ${opciones.numLiteral}

Cada pregunta debe tener 4 opciones, indicando cu√°l es la correcta. El texto y las preguntas deben ser apropiados para ni√±os de 7-8 a√±os.

Responde √öNICAMENTE con un objeto JSON que siga esta estructura exacta, sin explicaciones, sin comentarios:

{
  "titulo": "T√≠tulo del examen",
  "texto": "Contenido del texto completo",
  "preguntas": [
    { "pregunta": "Pregunta 1", "opciones": ["Opci√≥n A","Opci√≥n B","Opci√≥n C","Opci√≥n D"], "respuesta": "Opci√≥n A" },
    // ...preguntas pero solo tipo literal
  ]
}`;
      break;
    case 'comprension':
      prompt += `Genera una ficha de comprensi√≥n lectora para estudiantes de 2¬∫ grado con las siguientes caracter√≠sticas:
- Tipo de texto: ${opciones.tipoTexto}
- Tema: ${opciones.tema}
- Longitud: ${opciones.longitud} palabras
- Preguntas literales: ${opciones.numLiteral}
- Preguntas inferenciales: ${opciones.numInferencial}
- Preguntas cr√≠ticas: ${opciones.numCritica}
${opciones.vocabulario ? '- Incluir secci√≥n de vocabulario con 5 palabras clave y sus definiciones' : ''}

El texto debe ser apropiado para ni√±os de 7-8 a√±os, con vocabulario sencillo y oraciones cortas.

Responde √öNICAMENTE con un objeto JSON que siga esta estructura exacta, sin explicaciones, sin comentarios:

{
  "titulo": "T√≠tulo de la ficha",
  "texto": "Contenido del texto completo",
  "preguntas": [
    {"tipo": "literal", "pregunta": "Pregunta 1", "respuesta": "Respuesta 1"},
    {"tipo": "inferencial", "pregunta": "Pregunta 2", "respuesta": "Respuesta 2"},
    {"tipo": "critica", "pregunta": "Pregunta 3", "respuesta": "Respuesta 3"}
  ],
  "vocabulario": [
    {"palabra": "Palabra 1", "definicion": "Definici√≥n 1"},
    {"palabra": "Palabra 2", "definicion": "Definici√≥n 2"}
  ]
}`;
      break;
    case 'escritura':
      prompt += `Genera una actividad de producci√≥n escrita para estudiantes de 2¬∫ grado con las siguientes caracter√≠sticas:
- Tipo de texto: ${opciones.tipoTexto}
- Tema: ${opciones.tema}
- Nivel de ayuda: ${opciones.nivelAyuda}
${opciones.conectores ? '- Incluir banco de conectores apropiados' : ''}

La actividad debe incluir instrucciones claras y sencillas apropiadas para ni√±os de 7-8 a√±os.

Responde √öNICAMENTE con un objeto JSON que siga esta estructura exacta, sin explicaciones, sin comentarios:

{
  "titulo": "T√≠tulo de la actividad",
  "descripcion": "Breve descripci√≥n de la actividad",
  "instrucciones": "Instrucciones paso a paso",
  "estructuraPropuesta": "Estructura sugerida para el texto",
  "conectores": ["Conector 1", "Conector 2", "Conector 3"],
  "listaVerificacion": ["Punto 1", "Punto 2", "Punto 3"]
}`;
      break;
    case 'gramatica':
      prompt += `Genera un ejercicio de gram√°tica y ortograf√≠a para estudiantes de 2¬∫ grado con las siguientes caracter√≠sticas:
- Aspecto a trabajar: ${opciones.aspecto}
- Tipo de ejercicio: ${opciones.tipoEjercicio}
- N√∫mero de √≠tems: ${opciones.numItems}
- Contexto: ${opciones.contexto}

El ejercicio debe incluir instrucciones claras y ejemplos sencillos apropiados para ni√±os de 7-8 a√±os.

Responde √öNICAMENTE con un objeto JSON que siga esta estructura exacta, sin explicaciones, sin comentarios:

{
  "titulo": "T√≠tulo del ejercicio",
  "instrucciones": "Instrucciones claras y sencillas",
  "ejemplo": "Ejemplo resuelto para guiar a los estudiantes",
  "items": [
    {"consigna": "√çtem 1", "respuesta": "Respuesta 1"},
    {"consigna": "√çtem 2", "respuesta": "Respuesta 2"}
  ]
}`;
      break;
    case 'oral':
      prompt += `Genera un gui√≥n para actividad de comunicaci√≥n oral para estudiantes de 2¬∫ grado con las siguientes caracter√≠sticas:
- Formato: ${opciones.formato}
- Tema: ${opciones.tema}
- Instrucciones espec√≠ficas: ${opciones.instrucciones}

La actividad debe ser apropiada para ni√±os de 7-8 a√±os, con vocabulario sencillo y estructuras simples.

Responde √öNICAMENTE con un objeto JSON que siga esta estructura exacta, sin explicaciones, sin comentarios:

{
  "titulo": "T√≠tulo de la actividad",
  "descripcion": "Breve descripci√≥n de la actividad",
  "instruccionesDocente": "Gu√≠a para el docente",
  "guionEstudiante": "Modelo o estructura para los estudiantes",
  "preguntasOrientadoras": ["Pregunta 1", "Pregunta 2", "Pregunta 3"],
  "criteriosEvaluacion": ["Criterio 1", "Criterio 2", "Criterio 3"]
}`;
      break;
    case 'drag_and_drop':
      const tipoActividad = opciones.tipoActividad;
      // Determinar el tema final
      let temaFinal = opciones.tema || 'cotidiano';
      if (opciones.temaPredefinido && opciones.temaPredefinido !== 'Otro (personalizado)') {
        temaFinal = opciones.temaPredefinido;
      } else if (opciones.temaPredefinido === 'Otro (personalizado)' && opciones.temaPersonalizado) {
        temaFinal = opciones.temaPersonalizado;
      }

      // Determinar par√°metros
      const longitudOracion = opciones.longitudOracion || 'Normal (4-5 palabras)';
      
      if (tipoActividad === 'formar_oracion') {
        prompt += `El t√≠tulo de este recurso es "Juegos interactivos - Formar oraciones".\n\nGenera exactamente ${opciones.numActividades} actividades de tipo "formar_oracion" para estudiantes de 2¬∫ grado de primaria sobre el tema "${temaFinal}".\n\nPAR√ÅMETROS DE CONFIGURACI√ìN:\n- Tema: ${temaFinal}\n- Longitud de oraciones: ${longitudOracion}\n\nCARACTER√çSTICAS CR√çTICAS para oraciones NATURALES:\n- TODAS las actividades deben ser tipo "formar_oracion"\n- Para cada actividad:\n  - Crea oraciones con FLUJO NATURAL que los ni√±os usar√≠an al hablar\n  - Respetar la longitud especificada: ${longitudOracion}\n  - La primera palabra DEBE empezar con MAY√öSCULA\n  - Presenta las palabras mezcladas aleatoriamente\n  - Usar VERBOS DE ACCI√ìN y DESCRIPTORES naturales\n  - Incorporar CONTEXTOS FAMILIARES para los ni√±os\n  - Evitar construcciones artificiales o repetitivas\n  - Cada oraci√≥n debe tener sentido completo y ser agradable de leer\n  - Vocabulario apropiado para 2¬∫ grado (7-8 a√±os)\n\nEJEMPLOS MEJORADOS por tema:\n\nüè† FAMILIA:\n‚úÖ "Mi hermana canta hermoso" ‚Üí ["canta", "hermana", "Mi", "hermoso"]\n‚úÖ "Pap√° prepara desayuno rico" ‚Üí ["rico", "prepara", "Pap√°", "desayuno"]\n‚úÖ "Abuela cuenta cuentos divertidos" ‚Üí ["divertidos", "cuenta", "Abuela", "cuentos"]\n\nüêæ ANIMALES:\n‚úÖ "El perro corre alegre" ‚Üí ["alegre", "perro", "corre", "El"]\n‚úÖ "Los gatos duermen tranquilos" ‚Üí ["tranquilos", "gatos", "duermen", "Los"]\n‚úÖ "Mi p√°jaro canta bonito" ‚Üí ["bonito", "p√°jaro", "canta", "Mi"]\n\nüè´ ESCUELA:\n‚úÖ "Los ni√±os juegan juntos" ‚Üí ["juntos", "ni√±os", "juegan", "Los"]\n‚úÖ "Maestra explica muy bien" ‚Üí ["bien", "explica", "Maestra", "muy"]\n‚úÖ "Mis amigos estudian mucho" ‚Üí ["mucho", "amigos", "estudian", "Mis"]\n\n‚ùå EVITAR (oraciones artificiales):\n- "La madre hace comida" (muy rob√≥tico)\n- "El ni√±o tiene l√°piz" (sin naturalidad)\n- "Los estudiantes en escuela" (incompleta)\n\nEstructura JSON requerida:\n\n{\n  "titulo": "Juegos interactivos - Formar oraciones",\n  "actividades": [\n    {\n      "tipo": "formar_oracion",\n      "enunciado": "Arrastra las palabras para formar la oraci√≥n correcta sobre ${temaFinal}.",\n      "opciones": ["palabra1", "palabra2", "palabra3", "palabra4"],\n      "respuesta": ["Palabra1", "palabra2", "palabra3", "palabra4"]\n    }\n  ]\n}`;
      } else if (tipoActividad === 'completar_oracion') {
        prompt += `El t√≠tulo de este recurso es "Juegos interactivos - Completar oraciones".\n\nGenera exactamente ${opciones.numActividades} actividades de tipo "completar_oracion" para estudiantes de 2¬∫ grado de primaria sobre el tema "${temaFinal}".\n\nPAR√ÅMETROS DE CONFIGURACI√ìN:\n- Tema: ${temaFinal}\n- Longitud de oraciones: ${longitudOracion}\n\nCARACTER√çSTICAS CR√çTICAS - MUY IMPORTANTE:\n- TODAS las actividades deben ser tipo "completar_oracion"\n- Para cada actividad:\n  - El campo "enunciado" DEBE contener EXACTAMENTE 5 guiones bajos seguidos: _____\n  - NUNCA incluir la respuesta completa en el enunciado\n  - La oraci√≥n debe sonar como algo que un ni√±o dir√≠a naturalmente\n  - Primera letra MAY√öSCULA, punto final\n  - Exactamente 4 opciones: 1 correcta + 3 claramente incorrectas\n  - Las opciones incorrectas NO deben tener sentido en el contexto\n  - Usar vocabulario familiar y cotidiano apropiado para 2¬∫ grado\n  - Contextos que los ni√±os reconozcan f√°cilmente\n\nEJEMPLOS CORRECTOS (SIGUE ESTE FORMATO EXACTO):\n\nüè† FAMILIA:\n‚úÖ "Mi mam√° cocina muy _____." \n   Opciones: ["rico", "mesa", "libro", "zapato"] ‚Üí Respuesta: ["rico"]\n‚úÖ "El beb√© llora cuando tiene _____." \n   Opciones: ["hambre", "l√°piz", "silla", "pared"] ‚Üí Respuesta: ["hambre"]\n‚úÖ "Mi pap√° trabaja muy _____." \n   Opciones: ["duro", "flor", "pez", "silla"] ‚Üí Respuesta: ["duro"]\n\nüêæ ANIMALES:\n‚úÖ "El perro mueve la _____ cuando est√° feliz." \n   Opciones: ["cola", "mesa", "casa", "l√°piz"] ‚Üí Respuesta: ["cola"]\n‚úÖ "Los peces viven en el _____." \n   Opciones: ["agua", "√°rbol", "cielo", "libro"] ‚Üí Respuesta: ["agua"]\n‚úÖ "Mi gato duerme en la _____." \n   Opciones: ["cama", "comida", "pelota", "√°rbol"] ‚Üí Respuesta: ["cama"]\n\nüè´ ESCUELA:\n‚úÖ "Los ni√±os escriben con el _____." \n   Opciones: ["l√°piz", "perro", "comida", "√°rbol"] ‚Üí Respuesta: ["l√°piz"]\n‚úÖ "En el recreo jugamos en el _____." \n   Opciones: ["patio", "refrigerador", "cama", "televisi√≥n"] ‚Üí Respuesta: ["patio"]\n‚úÖ "La maestra explica en la _____." \n   Opciones: ["pizarra", "cocina", "carro", "flor"] ‚Üí Respuesta: ["pizarra"]\n\n‚ùå EVITAR COMPLETAMENTE:\n- "Mi pap√° trabaja duro." (NO debe mostrar la respuesta completa)\n- "El ni√±o come." (muy simple, sin _____ )\n- Opciones m√∫ltiples correctas: "Mi _____ me quiere" ["mam√°", "pap√°", "hermana"]\n- Oraciones artificiales: "El objeto est√° en lugar"\n\nEstructura JSON requerida (FORMATO OBLIGATORIO):\n\n{\n  "titulo": "Juegos interactivos - Completar oraciones",\n  "actividades": [\n    {\n      "tipo": "completar_oracion",\n      "enunciado": "Mi mam√° cocina muy _____.",\n      "opciones": ["rico", "mesa", "libro", "zapato"],\n      "respuesta": ["rico"]\n    }\n  ]\n}`;
      } else {
        prompt += `Error: Tipo de actividad no v√°lido. Debe ser "formar_oracion" o "completar_oracion".`;
      }
      
      prompt += `\n\nRECUERDA:\n- Generar exactamente ${opciones.numActividades} actividades\n- Todas deben ser del tipo "${tipoActividad}"\n- Tema: "${temaFinal}"\n- Vocabulario apropiado para 2¬∫ grado\n- Alineado con el Curr√≠culo Nacional peruano de Comunicaci√≥n`;
      break;
    default:
      prompt += `Genera un recurso educativo para estudiantes de 2¬∫ grado sobre el tema ${opciones.tema || 'general'}.

IMPORTANTE: Responde √öNICAMENTE el objeto JSON correspondiente, sin explicaciones ni comentarios.`;
  }

  // Agregar recordatorio final para alinear el recurso con el curr√≠culo
  prompt += `\n\nRecuerda alinear el recurso con las competencias del Curr√≠culo Nacional de Educaci√≥n B√°sica del Per√∫ para 2¬∫ grado en el √°rea de Comunicaci√≥n.`;
  
  return prompt;
}


/**
 * Intenta parsear un string a JSON de forma segura.
 * Se extraen todos los bloques JSON balanceados y se selecciona el √∫ltimo,
 * asumiendo que es el bloque final y correcto en caso de que haya texto extra.
 * @param {string} content - String recibido del modelo.
 * @returns {Object} - Objeto JSON.
 */
function parseJSON(content) {
  if (typeof content !== 'string') {
    throw new Error('Respuesta inv√°lida: no es un string.');
  }

  const trimmedContent = content.trim();
  const candidates = [];
  let idx = 0;

  // Buscar todos los bloques JSON balanceados
  while (true) {
    const start = trimmedContent.indexOf('{', idx);
    if (start === -1) break;
    const candidate = extractBalancedJson(trimmedContent, start);
    if (candidate) {
      candidates.push(candidate);
      idx = start + candidate.length;
    } else {
      break;
    }
  }

  if (candidates.length === 0) {
    console.error('No se encontr√≥ objeto JSON en la respuesta:', trimmedContent);
    throw new Error('Respuesta inv√°lida: no se encontr√≥ objeto JSON.');
  }

  // Seleccionar el √∫ltimo bloque JSON encontrado
  const jsonCandidate = candidates[candidates.length - 1];
  try {
    return JSON.parse(jsonCandidate);
  } catch (error) {
    console.error('Error al parsear el JSON extra√≠do:', jsonCandidate);
    throw new Error('Respuesta recibida no se pudo convertir a JSON.');
  }
}

/**
 * Extrae un bloque JSON balanceado dado un √≠ndice de inicio en el texto.
 * @param {string} text - Texto a analizar.
 * @param {number} startIndex - √çndice donde se encontr√≥ '{'.
 * @returns {string|null} - Bloque JSON extra√≠do o null si no se encuentra uno completo.
 */
function extractBalancedJson(text, startIndex) {
  let braceCount = 0;
  let endIndex = -1;
  for (let i = startIndex; i < text.length; i++) {
    if (text[i] === '{') {
      braceCount++;
    } else if (text[i] === '}') {
      braceCount--;
      if (braceCount === 0) {
        endIndex = i;
        break;
      }
    }
  }
  if (endIndex !== -1) {
    return text.slice(startIndex, endIndex + 1);
  }
  return null;
}

export default { generarRecurso };